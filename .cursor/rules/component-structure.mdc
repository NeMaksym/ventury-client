---
description: Provides a standard structure for React components.
globs: *.tsx
alwaysApply: false
---

When creating new React components, or refactoring existing ones, consider the following structure:

1.  **Imports**: Group standard library imports, then third-party library imports, then local module/component imports.
    ```tsx
    import React, { useState, useEffect } from 'react';
    import { SomeThirdPartyComponent } from 'some-library';

    import { MyOtherComponent } from '../MyOtherComponent';
    import styles from './MyComponent.module.css'; // If using CSS Modules
    import { MyIcon } from '../../icons';
    ```

2.  **Props Interface/Type**: Define the component's props.
    ```tsx
    interface MyComponentProps {
      title: string;
      count?: number;
      onAction: () => void;
    }
    ```

3.  **Component Definition**: The main component function.
    ```tsx
    const MyComponent: React.FC<MyComponentProps> = ({ title, count = 0, onAction }) => {
      // State and Hooks
      const [isActive, setIsActive] = useState<boolean>(false);

      // Effects
      useEffect(() => {
        // Side effect logic
      }, [dependencies]);

      // Event Handlers / Helper Functions
      const handleClick = () => {
        setIsActive(!isActive);
        onAction();
      };

      // Render Logic
      return (
        <div className={styles.container}>
          <h1>{title}</h1>
          <p>Count: {count}</p>
          <button onClick={handleClick}>Action</button>
          {isActive && <p>Component is active!</p>}
          <MyOtherComponent />
        </div>
      );
    };
    ```

4.  **Styled Components / CSS-in-JS (if applicable near component)**: If you define styled components or similar directly in the file.
    ```tsx
    // Example if using styled-components, often this is in a separate file
    // const StyledContainer = styled.div`
    //   padding: 1rem;
    //   border: 1px solid #ccc;
    // `;
    ```

5.  **Default Props (if needed, though often handled by default values in destructuring)**:
    ```tsx
    // MyComponent.defaultProps = {
    //   count: 0,
    // };
    ```

6.  **Export**: Default export the component.
    ```tsx
    export default MyComponent;
    // Or named export: export { MyComponent };
    ```

**General Guidelines for Component Structure**:
- Keep related logic (state, effects, handlers) close to where it's used within the component.
- For larger components, consider breaking them down into smaller, more manageable sub-components.
- If styles become extensive, consider moving them to a separate file (e.g., `MyComponent.module.css`, `MyComponent.styles.ts`). 