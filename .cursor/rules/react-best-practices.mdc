---
description: 
globs: *.tsx
alwaysApply: false
---

- Prefer functional components with Hooks over class components.
- Use `key` props when rendering lists of components.
- Avoid using indexes as keys if the list can be reordered.
- Memoize components using `React.memo` when performance is a concern and props don't change frequently.
- Use `useCallback` for functions passed as props to memoized children to prevent unnecessary re-renders.
- Use `useMemo` to memoize expensive calculations.
- Keep components small and focused on a single responsibility (Single Responsibility Principle).
- Lift state up to the closest common ancestor when multiple components need access to the same state.
- Use Context API for global state or state that needs to be passed down many levels, but use it sparingly to avoid performance issues.
- Name event handler props consistently (e.g., `onClick`, `onChange`, `onSubmit`).
- Use Fragments (`<>...</>`) to avoid adding unnecessary nodes to the DOM.
- Follow accessibility (a11y) best practices (e.g., semantic HTML, ARIA attributes). 
